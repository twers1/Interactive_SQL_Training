/* 1 задание (В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине «Основы баз данных». Установить текущую дату в качестве даты выполнения попытки.) */

INSERT INTO attempt (student_id, subject_id, date_attempt)

SELECT student_id, subject_id, NOW()
FROM student
     INNER JOIN attempt USING(student_id)
     INNER JOIN subject USING(subject_id)
     WHERE name_student LIKE 'Баранов Павел'
           AND name_subject LIKE 'Основы баз данных';

/* 2 задание (Случайным образом выбрать три вопроса (запрос) по дисциплине, тестирование по которой собирается проходить студент, занесенный в таблицу attempt последним, и добавить их в таблицу testing. id последней попытки получить как максимальное значение id из таблицы attempt.) */

INSERT INTO testing(attempt_id, question_id, answer_id)
SELECT (SELECT MAX(attempt.attempt_id) FROM attempt), question_id, NULL
  FROM question INNER JOIN attempt USING(subject_id)
 WHERE subject_id = (SELECT subject_id FROM attempt
                     ORDER BY attempt_id DESC
                     LIMIT 1)                    
 ORDER BY RAND()
 LIMIT 3;

/* 3 задание (Студент прошел тестирование (то есть все его ответы занесены в таблицу testing), далее необходимо вычислить результат(запрос) и занести его в таблицу attempt для соответствующей попытки.  Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до целого.) */

UPDATE attempt
    SET result = (SELECT ROUND(SUM(is_correct)/3*100, 0)
        FROM answer INNER JOIN testing ON answer.answer_id = testing.answer_id
        WHERE attempt_id = 8)
    WHERE attempt_id = 8;


/* 4 задание (Удалить из таблицы attempt все попытки, выполненные раньше 1 мая 2020 года. Также удалить и все соответствующие этим попыткам вопросы из таблицы testing, которая создавалась следующим запросом:) */

DELETE FROM attempt
WHERE date_attempt < "2020-05-01";

SELECT * FROM attempt;
