/* 1 задание (Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.) */

SELECT buy.buy_id,title,  price, buy_book.amount
FROM client INNER JOIN buy USING(client_id)
    INNER JOIN buy_book USING(buy_id)
    INNER JOIN book USING(book_id)
WHERE name_client = 'Баранов Павел'
ORDER BY buy_id, book.title;

/* 2 задание (Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).  Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг.)*/

SELECT name_author, title, COUNT(buy_book.amount) AS Количество
  FROM author
 INNER JOIN book USING(author_id)
  LEFT JOIN buy_book USING(book_id)
 GROUP BY book.title, name_author
 ORDER BY name_author, title;
 
/* 3  задание(Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в алфавитном порядке по названию городов.) */

SELECT  name_city, COUNT(buy_id) AS Количество
  FROM city
 INNER JOIN client on city.city_id = client.city_id
inner join buy on client.client_id = buy.client_id
 GROUP BY  name_city
 ORDER BY  name_city ASC;
 
 /* 4 задание (Вывести номера всех оплаченных заказов и даты, когда они были оплачены.) */

SELECT buy_id, date_step_end
FROM buy_step 
WHERE buy_step.step_id = 1 AND date_step_end IS NOT NULL

/* 5 задание (Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.) */

SELECT b2.buy_id,c.name_client,sum(bb.amount *b.price)  AS "Стоимость"
FROM book b 
INNER JOIN buy_book bb ON bb.book_id =b.book_id 
INNER JOIN buy b2 ON b2.buy_id =bb.buy_id 
INNER JOIN client c ON c.client_id =b2.client_id 
GROUP BY c.name_client, b2.buy_id
ORDER BY b2.buy_id ;

/* 6 задание(Вывести номера заказов (buy_id) и названия этапов,  на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.) */

SELECT buy_id, name_step
FROM step
INNER JOIN buy_step ON step.step_id = buy_step.step_id
WHERE date_step_beg IS NOT NULL AND date_step_end IS NULL
ORDER BY buy_id

/* 7 задание (В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город (рассматривается только этап Транспортировка). Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. В результат включить номер заказа (buy_id), а также вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.) */

SELECT buy_id, DATEDIFF(date_step_end, date_step_beg) AS Количество_дней, if(DATEDIFF(date_step_end, date_step_beg)>days_delivery,(datediff(date_step_end, date_step_beg))-days_delivery,0) AS Опоздание
FROM buy_step 
         INNER JOIN buy USING(buy_id)
         INNER JOIN client USING(client_id)
         INNER JOIN city USING(city_id)
WHERE date_step_end IS NOT NULL AND buy_step.step_id=3

/* 8 задание(Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.) */

SELECT DISTINCT name_client
FROM client JOIN buy USING(client_id)
            JOIN buy_book USING(buy_id)
            JOIN book USING(book_id)
            JOIN author USING(author_id)
WHERE author.name_author LIKE 'Достоевский Ф.М.'
ORDER BY name_client;

/* 9 ззадание(Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний столбец назвать Количество.)*/

SELECT name_genre, SUM(buy_book.amount) as Количество
FROM genre JOIN book USING(genre_id)
    JOIN buy_book USING(book_id)
    where name_genre not in ('Поэзия')
GROUP BY name_genre

/* 10 задание(Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.) */

select year(date_payment) as Год, 
    monthname(date_payment) as Месяц,
    sum(amount*price) as Сумма
from buy_archive
group by Год, Месяц

union all
select year(date_step_end) as Год,
monthname(date_step_end) as Месяц,
sum(bb.amount*price) as Сумма
from buy_book bb 
    join buy_step bs on bb.buy_id = bs.buy_id
    and bs.date_step_end
    and bs.step_id = 1
    join book USING(book_id)
GROUP BY Год, Месяц
ORDER BY Месяц, Год;


/* 11 задание(Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за 2020 и 2019 год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.)  */

WITH Title_sales as (
    select title, buy_book.amount, price
    from book
        inner join buy_book
    using(book_id)
        inner join buy using(buy_id)
        inner join buy_step
    using(buy_id)
        inner join step using(step_id) 
    where date_step_end is not Null and name_step = 'Оплата'

union all
select title, buy_archive.amount, buy_archive.price
    from buy_archive
    inner join book using(book_id)
)

select title, sum(amount) as Количество, sum(amount*price) as Сумма
from Title_sales
group by title
order by Сумма desc;

-- ужасная задача без подсказок никуда



